// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/google/wire"
	"github.com/paulohfera/todo-backend-go/configs"
	"github.com/paulohfera/todo-backend-go/internal/data/repository"
	repository2 "github.com/paulohfera/todo-backend-go/internal/domain/interface/repository"
	"github.com/paulohfera/todo-backend-go/internal/domain/usecase"
	"github.com/paulohfera/todo-backend-go/internal/rest"
	"github.com/paulohfera/todo-backend-go/internal/rest/handler"
	"github.com/paulohfera/todo-backend-go/pkg/api"
	"github.com/paulohfera/todo-backend-go/pkg/postgres"
)

// Injectors from wire.go:

func RegisterServices() *api.Api {
	configuration := configs.GetConfigurations()
	dbContext := db.NewOrGetSingleton(configuration)
	taskReposytory := repository.NewTaskReposytory(dbContext)
	taskUseCase := usecase.NewTaskUseCase(taskReposytory)
	taskHandler := handler.NewTaskHandler(taskUseCase)
	restRest := rest.NewRestRouters(taskHandler)
	apiApi := api.New(configuration, restRest)
	return apiApi
}

func RegisterServicesUseCase() *usecase.TaskUseCase {
	configuration := configs.GetConfigurations()
	dbContext := db.NewOrGetSingleton(configuration)
	taskReposytory := repository.NewTaskReposytory(dbContext)
	taskUseCase := usecase.NewTaskUseCase(taskReposytory)
	return taskUseCase
}

// wire.go:

var deps = []interface{}{}

var providerSet wire.ProviderSet = wire.NewSet(db.NewOrGetSingleton, repository.NewTaskReposytory, usecase.NewTaskUseCase, handler.NewTaskHandler, rest.NewRestRouters, api.New, wire.Bind(new(repository2.ITaskRepository), new(*repository.TaskReposytory)))
